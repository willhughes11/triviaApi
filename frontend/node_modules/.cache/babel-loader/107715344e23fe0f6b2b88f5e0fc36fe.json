{"ast":null,"code":"var _jsxFileName = \"/Users/pimpmasterguapo/Desktop/triviaApi/starter/frontend/src/components/QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n        console.log(previousQuestions);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          console.log(result);\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.containsAll = (question, answer) => {\n      if (answer[0] === 'the' || answer[0] === 'a') {\n        answer.shift();\n      }\n\n      return answer.every(v => question.includes(v));\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,#!$%&;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return this.containsAll(formatGuess, answerArray);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: `/categories`,\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"choose-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }, \"Choose Category\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }\n    }, \"All\"), Object.keys(this.state.categories).map(id => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[id],\n          id\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }\n      }, this.state.categories[id]);\n    })));\n  }\n\n  renderFinalScore() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"final-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, \" Your Final Score is \", this.state.numCorrect), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, \" Play Again? \"));\n  }\n\n  renderCorrectAnswer() {\n    let evaluate = this.evaluateAnswer();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, this.state.currentQuestion.question), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${evaluate ? 'correct' : 'wrong'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, this.state.currentQuestion.answer), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, \" Next Question \"));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, this.state.currentQuestion.question), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    })));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["/Users/pimpmasterguapo/Desktop/triviaApi/starter/frontend/src/components/QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","console","log","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","alert","submitGuess","preventDefault","evaluate","evaluateAnswer","numCorrect","restartGame","containsAll","answer","shift","every","v","includes","formatGuess","replace","toLowerCase","answerArray","split","categories","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5; \n\nclass QuizView extends Component {\n  constructor(props){\n    super();\n    this.state = {\n        quizCategory: null,\n        previousQuestions: [], \n        showAnswer: false,\n        categories: {},\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n    }\n  }\n\n  componentDidMount(){\n    $.ajax({\n      url: `/categories`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectCategory = ({type, id=0}) => {\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) \n    console.log(previousQuestions)\n    }\n\n    $.ajax({\n      url: '/quizzes', //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        console.log(result)\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true\n        })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    let evaluate =  this.evaluateAnswer()\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [], \n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay(){\n      return (\n          <div className=\"quiz-play-holder\">\n              <div className=\"choose-header\">Choose Category</div>\n              <div className=\"category-holder\">\n                  <div className=\"play-category\" onClick={this.selectCategory}>All</div>\n                  {Object.keys(this.state.categories).map(id => {\n                  return (\n                    <div\n                      key={id}\n                      value={id}\n                      className=\"play-category\"\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\n                      {this.state.categories[id]}\n                    </div>\n                  )\n                })}\n              </div>\n          </div>\n      )\n  }\n\n  renderFinalScore(){\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\n      </div>\n    )\n  }\n\n  containsAll = (question, answer) => {\n    if(answer[0] === 'the' || answer[0] === 'a'){\n      answer.shift()\n    }\n    return answer.every(v => question.includes(v))\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,#!$%&;:{}=\\-_`~()]/g,\"\").toLowerCase();\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return this.containsAll(formatGuess,answerArray)\n  }\n\n  renderCorrectAnswer(){\n    let evaluate =  this.evaluateAnswer()\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\n      </div>\n    )\n  }\n\n  renderPlay(){\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\n      ? this.renderFinalScore()\n      : this.state.showAnswer \n        ? this.renderCorrectAnswer()\n        : (\n          <div className=\"quiz-play-holder\">\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n            <form onSubmit={this.submitGuess}>\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\n            </form>\n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n        ? this.renderPlay()\n        : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}